initSidebarItems({"mod":[["accumulate",""],["cartesian_product",""],["clone_each",""],["fold",""],["group_by",""],["intersperse",""],["keep_some",""],["pad_tail_to",""],["prelude","This module just centralises all the iterator extension traits in one place, suitable for glob importing."],["round_robin",""],["skip_exactly",""],["sorted",""],["stride",""],["take_exactly",""],["tee",""],["zip_longest",""]],"trait":[["AccumulateIterator","( <em>a</em><sub>0</sub>, <em>a</em><sub>1</sub>, <em>a</em><sub>2</sub>, ... ),   ( <em>a</em><sub>0</sub>, (<em>a</em><sub>0</sub>  <em>a</em><sub>1</sub>), ((<em>a</em><sub>0</sub>  <em>a</em><sub>1</sub>)  <em>a</em><sub>2</sub>), ... )"],["CartesianProductIterator","( <em>a</em><sub>0</sub>, <em>a</em><sub>1</sub>, ... ), ( <em>b</em><sub>0</sub>, <em>b</em><sub>1</sub>, ... )  ( (<em>a</em><sub>0</sub>, <em>b</em><sub>0</sub>), (<em>a</em><sub>0</sub>, <em>b</em><sub>1</sub>), ..., (<em>a</em><sub>1</sub>, <em>b</em><sub>0</sub>), (<em>a</em><sub>1</sub>, <em>b</em><sub>1</sub>), ... )"],["CloneEachIterator","( <em>a</em><sub>0</sub>, <em>a</em><sub>1</sub>, ... )  ( <em>a</em><sub>0</sub>`.clone()`, <em>a</em><sub>1</sub>`.clone()`, ... )"],["FoldlIterator","( <em>a</em><sub>0</sub>, <em>a</em><sub>1</sub>, <em>a</em><sub>2</sub>, ... ),   ((<em>a</em><sub>0</sub>)  <em>a</em><sub>1</sub>)  <em>a</em><sub>2</sub>)  ..."],["FoldrIterator","( ..., <em>a</em><sub><em>n</em>-2</sub>, <em>a</em><sub><em>n</em>-1</sub>, <em>a</em><sub><em>n</em></sub>, ),   ...  (<em>a</em><sub><em>n</em>-2</sub>  (<em>a</em><sub><em>n</em>-1</sub>  (<em>a</em><sub><em>n</em></sub>)))"],["GroupByIterator","Sequence of iterators containing successive elements of the subject which have the same group according to a group function."],["IntersperseIterator","(<em>a</em><sub>0</sub>, <em>a</em><sub>1</sub>, ..., <em>a</em><sub>n</sub>), <em>i</em>  (<em>a</em><sub>0</sub>, <em>i</em>, <em>a</em><sub>1</sub>, <em>i</em>, ..., <em>i</em>, <em>a</em><sub>n</sub>)"],["KeepSomeIterator","<em>a</em>  (<em>e</em> | <em>e</em>  <em>a</em> : <em>Some</em>(<em>e</em>))"],["PadTailToIterator","Pads a sequence to a minimum length."],["RoundRobinIterator","(<em>a</em><sub>0</sub>, <em>a</em><sub>1</sub>, ...), (<em>b</em><sub>0</sub>, <em>b</em><sub>1</sub>, ...)  (<em>a</em><sub>0</sub>, <em>b</em><sub>0</sub>, <em>a</em><sub>1</sub>, <em>b</em><sub>1</sub>, ...)"],["SkipExactlyIterator","(..., <em>a</em><sub><em>i</em>-1</sub>, <em>a</em><sub><em>i</em></sub>, <em>a</em><sub><em>i</em>+1</sub>, ...), <em>i</em>  (<em>a</em><sub><em>i</em></sub>, <em>a</em><sub><em>i</em>+1</sub>, ...)"],["SortedIterator","Shorthand for collecting and sorting an iterator."],["StrideIterator","<em>a</em>, <em>n</em>  (<em>a</em><sub><em>i</em></sub> | <em>a</em><sub><em>i</em></sub>  <em>a</em> : <em>i</em>  <em>mod</em> <em>n</em> )"],["TakeExactlyIterator","(<em>a</em><sub>0</sub>, ..., <em>a</em><sub><em>i</em>-1</sub>, <em>a</em><sub><em>i</em></sub>, <em>a</em><sub><em>i</em>+1</sub>, ...), <em>i</em>  (<em>a</em><sub>0</sub>, ..., <em>a</em><sub><em>i</em>-1</sub>)"],["TeeIterator","<em>a</em>  <em>a</em>, <em>a</em>"],["ZipLongestIterator","(..., <em>a</em><sub><em>m</em></sub>), (..., <em>b</em><sub><em>m</em></sub>, <em>b</em><sub><em>m</em>+1</sub>, ..., <em>b</em><sub><em>n</em></sub>)  ( ..., (<em>Some</em>(<em>a</em><sub><em>m</em></sub>), <em>Some</em>(<em>b</em><sub><em>m</em></sub>)), (<em>None</em>, <em>Some</em>(<em>b</em><sub><em>m</em>+1</sub>)), ..., (<em>None</em>, <em>Some</em>(<em>b</em><sub><em>n</em></sub>)) )"]]});