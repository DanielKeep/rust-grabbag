var searchIndex = {};
searchIndex['grabbag'] = {"items":[[0,"iter","grabbag","This module contains a set of iterator extensions.  Rather than being named for the type of iterator they are implemented on, they are named for the method (or group of associated methods) being implemented.",null,null],[0,"accumulate","grabbag::iter","",null,null],[3,"Accumulate","grabbag::iter::accumulate","",null,null],[8,"AccumulateIterator","","(\n<em>a</em><sub>0</sub>,\n<em>a</em><sub>1</sub>,\n<em>a</em><sub>2</sub>,\n...\n),\n&#x2297;\n&nbsp;&rarr;&nbsp;\n(\n<em>a</em><sub>0</sub>,\n(<em>a</em><sub>0</sub> &#x2297; <em>a</em><sub>1</sub>),\n((<em>a</em><sub>0</sub> &#x2297; <em>a</em><sub>1</sub>) &#x2297; <em>a</em><sub>2</sub>),\n...\n)",null,null],[11,"accumulate","","Creates an iterator that scans from left to right over the input sequence, returning the accumulated result of calling the provided function on the entire sequence up to that point.",0,{"inputs":[{"name":"accumulateiterator"},{"name":"f"}],"output":{"name":"accumulate"}}],[11,"unwrap","","Unwraps the iterator, returning the underlying iterator.",1,{"inputs":[{"name":"accumulate"}],"output":{"name":"it"}}],[11,"next","","",1,{"inputs":[{"name":"accumulate"}],"output":{"name":"option"}}],[0,"cartesian_product","grabbag::iter","",null,null],[3,"CartesianProduct","grabbag::iter::cartesian_product","",null,null],[8,"CartesianProductIterator","","(\n<em>a</em><sub>0</sub>,\n<em>a</em><sub>1</sub>,\n...\n),\n(\n<em>b</em><sub>0</sub>,\n<em>b</em><sub>1</sub>,\n...\n)\n&nbsp;&rarr;&nbsp;\n(\n(<em>a</em><sub>0</sub>, <em>b</em><sub>0</sub>),\n(<em>a</em><sub>0</sub>, <em>b</em><sub>1</sub>),\n...,\n(<em>a</em><sub>1</sub>, <em>b</em><sub>0</sub>),\n(<em>a</em><sub>1</sub>, <em>b</em><sub>1</sub>),\n...\n)",null,null],[11,"cartesian_product","","Creates an iterator that yields the cartesian product of two input iterators.",2,{"inputs":[{"name":"cartesianproductiterator"},{"name":"rightit"}],"output":{"name":"cartesianproduct"}}],[11,"fmt","","",3,{"inputs":[{"name":"cartesianproduct"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"cartesianproduct"}],"output":{"name":"cartesianproduct"}}],[11,"next","","",3,{"inputs":[{"name":"cartesianproduct"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[0,"clone_each","grabbag::iter","",null,null],[3,"CloneEach","grabbag::iter::clone_each","",null,null],[8,"CloneEachIterator","","(\n<em>a</em><sub>0</sub>,\n<em>a</em><sub>1</sub>,\n...\n)\n&nbsp;&rarr;&nbsp;\n(\n<em>a</em><sub>0</sub>`.clone()`,\n<em>a</em><sub>1</sub>`.clone()`,\n...\n)",null,null],[11,"clone_each","","Creates an iterator which will clone each element of the input iterator.",4,{"inputs":[{"name":"cloneeachiterator"}],"output":{"name":"cloneeach"}}],[11,"fmt","","",5,{"inputs":[{"name":"cloneeach"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"cloneeach"}],"output":{"name":"cloneeach"}}],[11,"unwrap","","Unwraps the iterator, returning the underlying iterator.",5,{"inputs":[{"name":"cloneeach"}],"output":{"name":"it"}}],[11,"next","","",5,{"inputs":[{"name":"cloneeach"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"cloneeach"}],"output":{"name":"option"}}],[0,"group_by","grabbag::iter","",null,null],[3,"GroupBy","grabbag::iter::group_by","",null,null],[3,"GroupByShared","","",null,null],[3,"Group","","",null,null],[8,"GroupByIterator","","Sequence of iterators containing successive elements of the subject which have the same group according to a group function.",null,null],[11,"group_by","","Creates an iterator that yields a succession of `(group, sub_iterator)` pairs.  Each `sub_iterator` yields successive elements of the input iterator that have the same `group`.  An element's `group` is computed using the `f` closure.",6,{"inputs":[{"name":"groupbyiterator"},{"name":"groupfn"}],"output":{"name":"groupby"}}],[11,"next","","",7,{"inputs":[{"name":"groupby"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next","","",8,{"inputs":[{"name":"group"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[0,"fold","grabbag::iter","",null,null],[8,"FoldlIterator","grabbag::iter::fold","(\n<em>a</em><sub>0</sub>,\n<em>a</em><sub>1</sub>,\n<em>a</em><sub>2</sub>,\n...\n),\n&nbsp;&rarr;&nbsp;\n&nbsp;&rarr;&nbsp;\n((<em>a</em><sub>0</sub>) &#x2297; <em>a</em><sub>1</sub>) &#x2297; <em>a</em><sub>2</sub>) &#x2297; ...",null,null],[11,"foldl","","Folds the elements of the iterator together, from left to right, using `f`.",9,{"inputs":[{"name":"foldliterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"foldl_map","","Folds the elements of the iterator together, from left to right, using `f.",9,{"inputs":[{"name":"foldliterator"},{"name":"mapfn"},{"name":"f"}],"output":{"name":"option"}}],[8,"FoldrIterator","","(\n...,\n<em>a</em><sub><em>n</em>-2</sub>,\n<em>a</em><sub><em>n</em>-1</sub>,\n<em>a</em><sub><em>n</em></sub>,\n),\n&#x2297;\n&rarr;\n... &#x2297; (<em>a</em><sub><em>n</em>-2</sub> &#x2297; (<em>a</em><sub><em>n</em>-1</sub> &#x2297; (<em>a</em><sub><em>n</em></sub>)))",null,null],[11,"foldr","","Folds the elements of the iterator together, from right to left, using `f`.",10,{"inputs":[{"name":"foldriterator"},{"name":"f"}],"output":{"name":"option"}}],[0,"intersperse","grabbag::iter","",null,null],[3,"Intersperse","grabbag::iter::intersperse","",null,null],[8,"IntersperseIterator","","(<em>a</em><sub>0</sub>, <em>a</em><sub>1</sub>, ..., <em>a</em><sub>n</sub>), <em>i</em>\n&nbsp;&rarr;&nbsp;\n(<em>a</em><sub>0</sub>, <em>i</em>, <em>a</em><sub>1</sub>, <em>i</em>, ..., <em>i</em>, <em>a</em><sub>n</sub>)",null,null],[10,"intersperse","","Creates an iterator that yields `inject` between each element of the input iterator.  `inject` will not appear as the first or last element of the resulting iterator.",11,{"inputs":[{"name":"intersperseiterator"},{"name":"e"}],"output":{"name":"intersperse"}}],[11,"fmt","","",12,{"inputs":[{"name":"intersperse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"intersperse"}],"output":{"name":"intersperse"}}],[11,"next","","",12,{"inputs":[{"name":"intersperse"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[0,"keep_some","grabbag::iter","",null,null],[3,"KeepSome","grabbag::iter::keep_some","",null,null],[8,"KeepSomeIterator","","<em>a</em> &nbsp;&rarr;&nbsp;\n(<em>e</em> | <em>e</em> &nbsp;&rarr;&nbsp; <em>a</em> : <em>Some</em>(<em>e</em>))",null,null],[10,"keep_some","","Creates an iterator that, given a sequence of `Option<E>` values, unwraps all `Some(E)`s, and discards all `None`s.",13,{"inputs":[{"name":"keepsomeiterator"}],"output":{"name":"keepsome"}}],[11,"fmt","","",14,{"inputs":[{"name":"keepsome"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"keepsome"}],"output":{"name":"keepsome"}}],[11,"unwrap","","Unwraps the iterator, returning the underlying iterator.",14,{"inputs":[{"name":"keepsome"}],"output":{"name":"it"}}],[11,"next","","",14,{"inputs":[{"name":"keepsome"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"next_back","","",14,{"inputs":[{"name":"keepsome"}],"output":{"name":"option"}}],[0,"pad_tail_to","grabbag::iter","",null,null],[3,"PadTailTo","grabbag::iter::pad_tail_to","",null,null],[8,"PadTailToIterator","","Pads a sequence to a minimum length.",null,null],[11,"pad_tail_to","","Creates an iterator that ensures there are at least `n` elements in a sequence.  If the input iterator is too short, the difference is made up with a filler value.",15,{"inputs":[{"name":"padtailtoiterator"},{"name":"usize"},{"name":"f"}],"output":{"name":"padtailto"}}],[11,"unwrap","","Unwraps the iterator, returning the underlying iterator and filler closure.",16,null],[11,"next","","",16,{"inputs":[{"name":"padtailto"}],"output":{"name":"option"}}],[11,"next_back","","",16,{"inputs":[{"name":"padtailto"}],"output":{"name":"option"}}],[0,"round_robin","grabbag::iter","",null,null],[3,"RoundRobin","grabbag::iter::round_robin","",null,null],[3,"RoundRobinLongest","","",null,null],[8,"RoundRobinIterator","","(<em>a</em><sub>0</sub>, <em>a</em><sub>1</sub>, ...),\n(<em>b</em><sub>0</sub>, <em>b</em><sub>1</sub>, ...)\n&nbsp;&rarr;&nbsp;\n(<em>a</em><sub>0</sub>, <em>b</em><sub>0</sub>, <em>a</em><sub>1</sub>, <em>b</em><sub>1</sub>, ...)",null,null],[11,"round_robin","","Creates an iterator that alternates between yielding elements of the two input iterators.  It stops as soon as either iterator is exhausted.",17,{"inputs":[{"name":"roundrobiniterator"},{"name":"otherit"}],"output":{"name":"roundrobin"}}],[11,"round_robin_longest","","Creates an iterator that alternates between yielding elements of the two input iterators.  If one iterator stops before the other, it is simply skipped.",17,{"inputs":[{"name":"roundrobiniterator"},{"name":"otherit"}],"output":{"name":"roundrobinlongest"}}],[11,"fmt","","",18,{"inputs":[{"name":"roundrobin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"roundrobin"}],"output":{"name":"roundrobin"}}],[11,"unwrap","","Unwraps the iterator, returning the underlying iterators.",18,null],[11,"next","","",18,{"inputs":[{"name":"roundrobin"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"fmt","","",19,{"inputs":[{"name":"roundrobinlongest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"roundrobinlongest"}],"output":{"name":"roundrobinlongest"}}],[11,"unwrap","","Unwraps the iterator, returning the underlying iterators.",19,null],[11,"next","","",19,{"inputs":[{"name":"roundrobinlongest"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[0,"skip_exactly","grabbag::iter","",null,null],[8,"SkipExactlyIterator","grabbag::iter::skip_exactly","(..., <em>a</em><sub><em>i</em>-1</sub>, <em>a</em><sub><em>i</em></sub>, <em>a</em><sub><em>i</em>+1</sub>, ...), <em>i</em>\n&nbsp;&rarr;&nbsp;\n(<em>a</em><sub><em>i</em></sub>, <em>a</em><sub><em>i</em>+1</sub>, ...)",null,null],[11,"skip_exactly","","Skips *exactly* `n` elements from the iterator.",20,{"inputs":[{"name":"skipexactlyiterator"},{"name":"usize"}],"output":{"name":"self"}}],[0,"sorted","grabbag::iter","",null,null],[8,"SortedIterator","grabbag::iter::sorted","Shorthand for collecting and sorting an iterator.",null,null],[10,"sorted","","Returns a `Vec` with the elements of the input iterator in sorted order.",21,{"inputs":[{"name":"sortediterator"}],"output":{"name":"vec"}}],[10,"sorted_by","","Returns a `Vec` with the elements of the input iterator in sorted order, as specified by a comparison function.",21,{"inputs":[{"name":"sortediterator"},{"name":"f"}],"output":{"name":"vec"}}],[0,"stride","grabbag::iter","",null,null],[3,"Stride","grabbag::iter::stride","",null,null],[8,"StrideIterator","","<em>a</em>, <em>n</em>\n&nbsp;&rarr;&nbsp;\n(<em>a</em><sub><em>i</em></sub> | <em>a</em><sub><em>i</em></sub> &nbsp;&rarr;&nbsp; <em>a</em> : <em>i</em> &equiv; <em>mod</em> <em>n</em> )",null,null],[11,"stride","","Creates an iterator which yields every `n`th element of the input iterator, including the first.",22,{"inputs":[{"name":"strideiterator"},{"name":"usize"}],"output":{"name":"stride"}}],[11,"fmt","","",23,{"inputs":[{"name":"stride"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"stride"}],"output":{"name":"stride"}}],[11,"unwrap","","Unwraps the iterator, returning the underlying iterator.",23,{"inputs":[{"name":"stride"}],"output":{"name":"it"}}],[11,"next","","",23,{"inputs":[{"name":"stride"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[0,"take_exactly","grabbag::iter","",null,null],[3,"TakeExactly","grabbag::iter::take_exactly","",null,null],[8,"TakeExactlyIterator","","(<em>a</em><sub>0</sub>, ..., <em>a</em><sub><em>i</em>-1</sub>, <em>a</em><sub><em>i</em></sub>, <em>a</em><sub><em>i</em>+1</sub>, ...), <em>i</em>\n&nbsp;&rarr;&nbsp;\n(<em>a</em><sub>0</sub>, ..., <em>a</em><sub><em>i</em>-1</sub>)",null,null],[11,"take_exactly","","Creates an iterator that yields *exactly* `n` elements from the subject iterator.",24,{"inputs":[{"name":"takeexactlyiterator"},{"name":"usize"}],"output":{"name":"takeexactly"}}],[11,"fmt","","",25,{"inputs":[{"name":"takeexactly"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"takeexactly"}],"output":{"name":"takeexactly"}}],[11,"unwrap","","Unwraps the iterator, returning the underlying iterator.",25,{"inputs":[{"name":"takeexactly"}],"output":{"name":"it"}}],[11,"next","","",25,{"inputs":[{"name":"takeexactly"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[0,"tee","grabbag::iter","",null,null],[3,"Tee","grabbag::iter::tee","",null,null],[3,"TeeState","","",null,null],[8,"TeeIterator","","<em>a</em> &nbsp;&rarr;&nbsp; <em>a</em>, <em>a</em>",null,null],[11,"tee","","Creates a pair of iterators that will yield the same sequence of values.",26,null],[11,"next","","",27,{"inputs":[{"name":"tee"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[0,"zip_longest","grabbag::iter","",null,null],[3,"ZipLongest","grabbag::iter::zip_longest","",null,null],[8,"ZipLongestIterator","","(..., <em>a</em><sub><em>m</em></sub>),\n(..., <em>b</em><sub><em>m</em></sub>, <em>b</em><sub><em>m</em>+1</sub>, ..., <em>b</em><sub><em>n</em></sub>)\n&nbsp;&rarr;&nbsp;\n(\n...,\n(<em>Some</em>(<em>a</em><sub><em>m</em></sub>), <em>Some</em>(<em>b</em><sub><em>m</em></sub>)),\n(<em>None</em>, <em>Some</em>(<em>b</em><sub><em>m</em>+1</sub>)),\n...,\n(<em>None</em>, <em>Some</em>(<em>b</em><sub><em>n</em></sub>))\n)",null,null],[11,"zip_longest","","Creates an iterator which yields elements from both input iterators in lockstep.  If one iterator ends before the other, the elements from that iterator will be replaced with `None`.",28,{"inputs":[{"name":"ziplongestiterator"},{"name":"rightit"}],"output":{"name":"ziplongest"}}],[11,"fmt","","",29,{"inputs":[{"name":"ziplongest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"ziplongest"}],"output":{"name":"ziplongest"}}],[11,"unwrap","","Unwraps the iterator, returning the underlying iterators.",29,null],[11,"next","","",29,{"inputs":[{"name":"ziplongest"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[0,"prelude","grabbag::iter","This module just centralises all the iterator extension traits in one place, suitable for glob importing.",null,null],[8,"AccumulateIterator","","(\n<em>a</em><sub>0</sub>,\n<em>a</em><sub>1</sub>,\n<em>a</em><sub>2</sub>,\n...\n),\n&#x2297;\n&nbsp;&rarr;&nbsp;\n(\n<em>a</em><sub>0</sub>,\n(<em>a</em><sub>0</sub> &#x2297; <em>a</em><sub>1</sub>),\n((<em>a</em><sub>0</sub> &#x2297; <em>a</em><sub>1</sub>) &#x2297; <em>a</em><sub>2</sub>),\n...\n)",null,null],[11,"accumulate","","Creates an iterator that scans from left to right over the input sequence, returning the accumulated result of calling the provided function on the entire sequence up to that point.",0,{"inputs":[{"name":"accumulateiterator"},{"name":"f"}],"output":{"name":"accumulate"}}],[8,"CartesianProductIterator","","(\n<em>a</em><sub>0</sub>,\n<em>a</em><sub>1</sub>,\n...\n),\n(\n<em>b</em><sub>0</sub>,\n<em>b</em><sub>1</sub>,\n...\n)\n&nbsp;&rarr;&nbsp;\n(\n(<em>a</em><sub>0</sub>, <em>b</em><sub>0</sub>),\n(<em>a</em><sub>0</sub>, <em>b</em><sub>1</sub>),\n...,\n(<em>a</em><sub>1</sub>, <em>b</em><sub>0</sub>),\n(<em>a</em><sub>1</sub>, <em>b</em><sub>1</sub>),\n...\n)",null,null],[11,"cartesian_product","","Creates an iterator that yields the cartesian product of two input iterators.",2,{"inputs":[{"name":"cartesianproductiterator"},{"name":"rightit"}],"output":{"name":"cartesianproduct"}}],[8,"CloneEachIterator","","(\n<em>a</em><sub>0</sub>,\n<em>a</em><sub>1</sub>,\n...\n)\n&nbsp;&rarr;&nbsp;\n(\n<em>a</em><sub>0</sub>`.clone()`,\n<em>a</em><sub>1</sub>`.clone()`,\n...\n)",null,null],[11,"clone_each","","Creates an iterator which will clone each element of the input iterator.",4,{"inputs":[{"name":"cloneeachiterator"}],"output":{"name":"cloneeach"}}],[8,"GroupByIterator","","Sequence of iterators containing successive elements of the subject which have the same group according to a group function.",null,null],[11,"group_by","","Creates an iterator that yields a succession of `(group, sub_iterator)` pairs.  Each `sub_iterator` yields successive elements of the input iterator that have the same `group`.  An element's `group` is computed using the `f` closure.",6,{"inputs":[{"name":"groupbyiterator"},{"name":"groupfn"}],"output":{"name":"groupby"}}],[8,"FoldlIterator","","(\n<em>a</em><sub>0</sub>,\n<em>a</em><sub>1</sub>,\n<em>a</em><sub>2</sub>,\n...\n),\n&nbsp;&rarr;&nbsp;\n&nbsp;&rarr;&nbsp;\n((<em>a</em><sub>0</sub>) &#x2297; <em>a</em><sub>1</sub>) &#x2297; <em>a</em><sub>2</sub>) &#x2297; ...",null,null],[11,"foldl","","Folds the elements of the iterator together, from left to right, using `f`.",9,{"inputs":[{"name":"foldliterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"foldl_map","","Folds the elements of the iterator together, from left to right, using `f.",9,{"inputs":[{"name":"foldliterator"},{"name":"mapfn"},{"name":"f"}],"output":{"name":"option"}}],[8,"FoldrIterator","","(\n...,\n<em>a</em><sub><em>n</em>-2</sub>,\n<em>a</em><sub><em>n</em>-1</sub>,\n<em>a</em><sub><em>n</em></sub>,\n),\n&#x2297;\n&rarr;\n... &#x2297; (<em>a</em><sub><em>n</em>-2</sub> &#x2297; (<em>a</em><sub><em>n</em>-1</sub> &#x2297; (<em>a</em><sub><em>n</em></sub>)))",null,null],[11,"foldr","","Folds the elements of the iterator together, from right to left, using `f`.",10,{"inputs":[{"name":"foldriterator"},{"name":"f"}],"output":{"name":"option"}}],[8,"IntersperseIterator","","(<em>a</em><sub>0</sub>, <em>a</em><sub>1</sub>, ..., <em>a</em><sub>n</sub>), <em>i</em>\n&nbsp;&rarr;&nbsp;\n(<em>a</em><sub>0</sub>, <em>i</em>, <em>a</em><sub>1</sub>, <em>i</em>, ..., <em>i</em>, <em>a</em><sub>n</sub>)",null,null],[10,"intersperse","","Creates an iterator that yields `inject` between each element of the input iterator.  `inject` will not appear as the first or last element of the resulting iterator.",11,{"inputs":[{"name":"intersperseiterator"},{"name":"e"}],"output":{"name":"intersperse"}}],[8,"KeepSomeIterator","","<em>a</em> &nbsp;&rarr;&nbsp;\n(<em>e</em> | <em>e</em> &nbsp;&rarr;&nbsp; <em>a</em> : <em>Some</em>(<em>e</em>))",null,null],[10,"keep_some","","Creates an iterator that, given a sequence of `Option<E>` values, unwraps all `Some(E)`s, and discards all `None`s.",13,{"inputs":[{"name":"keepsomeiterator"}],"output":{"name":"keepsome"}}],[8,"PadTailToIterator","","Pads a sequence to a minimum length.",null,null],[11,"pad_tail_to","","Creates an iterator that ensures there are at least `n` elements in a sequence.  If the input iterator is too short, the difference is made up with a filler value.",15,{"inputs":[{"name":"padtailtoiterator"},{"name":"usize"},{"name":"f"}],"output":{"name":"padtailto"}}],[8,"RoundRobinIterator","","(<em>a</em><sub>0</sub>, <em>a</em><sub>1</sub>, ...),\n(<em>b</em><sub>0</sub>, <em>b</em><sub>1</sub>, ...)\n&nbsp;&rarr;&nbsp;\n(<em>a</em><sub>0</sub>, <em>b</em><sub>0</sub>, <em>a</em><sub>1</sub>, <em>b</em><sub>1</sub>, ...)",null,null],[11,"round_robin","","Creates an iterator that alternates between yielding elements of the two input iterators.  It stops as soon as either iterator is exhausted.",17,{"inputs":[{"name":"roundrobiniterator"},{"name":"otherit"}],"output":{"name":"roundrobin"}}],[11,"round_robin_longest","","Creates an iterator that alternates between yielding elements of the two input iterators.  If one iterator stops before the other, it is simply skipped.",17,{"inputs":[{"name":"roundrobiniterator"},{"name":"otherit"}],"output":{"name":"roundrobinlongest"}}],[8,"SkipExactlyIterator","","(..., <em>a</em><sub><em>i</em>-1</sub>, <em>a</em><sub><em>i</em></sub>, <em>a</em><sub><em>i</em>+1</sub>, ...), <em>i</em>\n&nbsp;&rarr;&nbsp;\n(<em>a</em><sub><em>i</em></sub>, <em>a</em><sub><em>i</em>+1</sub>, ...)",null,null],[11,"skip_exactly","","Skips *exactly* `n` elements from the iterator.",20,{"inputs":[{"name":"skipexactlyiterator"},{"name":"usize"}],"output":{"name":"self"}}],[8,"SortedIterator","","Shorthand for collecting and sorting an iterator.",null,null],[10,"sorted","","Returns a `Vec` with the elements of the input iterator in sorted order.",21,{"inputs":[{"name":"sortediterator"}],"output":{"name":"vec"}}],[10,"sorted_by","","Returns a `Vec` with the elements of the input iterator in sorted order, as specified by a comparison function.",21,{"inputs":[{"name":"sortediterator"},{"name":"f"}],"output":{"name":"vec"}}],[8,"StrideIterator","","<em>a</em>, <em>n</em>\n&nbsp;&rarr;&nbsp;\n(<em>a</em><sub><em>i</em></sub> | <em>a</em><sub><em>i</em></sub> &nbsp;&rarr;&nbsp; <em>a</em> : <em>i</em> &equiv; <em>mod</em> <em>n</em> )",null,null],[11,"stride","","Creates an iterator which yields every `n`th element of the input iterator, including the first.",22,{"inputs":[{"name":"strideiterator"},{"name":"usize"}],"output":{"name":"stride"}}],[8,"TakeExactlyIterator","","(<em>a</em><sub>0</sub>, ..., <em>a</em><sub><em>i</em>-1</sub>, <em>a</em><sub><em>i</em></sub>, <em>a</em><sub><em>i</em>+1</sub>, ...), <em>i</em>\n&nbsp;&rarr;&nbsp;\n(<em>a</em><sub>0</sub>, ..., <em>a</em><sub><em>i</em>-1</sub>)",null,null],[11,"take_exactly","","Creates an iterator that yields *exactly* `n` elements from the subject iterator.",24,{"inputs":[{"name":"takeexactlyiterator"},{"name":"usize"}],"output":{"name":"takeexactly"}}],[8,"TeeIterator","","<em>a</em> &nbsp;&rarr;&nbsp; <em>a</em>, <em>a</em>",null,null],[11,"tee","","Creates a pair of iterators that will yield the same sequence of values.",26,null],[8,"ZipLongestIterator","","(..., <em>a</em><sub><em>m</em></sub>),\n(..., <em>b</em><sub><em>m</em></sub>, <em>b</em><sub><em>m</em>+1</sub>, ..., <em>b</em><sub><em>n</em></sub>)\n&nbsp;&rarr;&nbsp;\n(\n...,\n(<em>Some</em>(<em>a</em><sub><em>m</em></sub>), <em>Some</em>(<em>b</em><sub><em>m</em></sub>)),\n(<em>None</em>, <em>Some</em>(<em>b</em><sub><em>m</em>+1</sub>)),\n...,\n(<em>None</em>, <em>Some</em>(<em>b</em><sub><em>n</em></sub>))\n)",null,null],[11,"zip_longest","","Creates an iterator which yields elements from both input iterators in lockstep.  If one iterator ends before the other, the elements from that iterator will be replaced with `None`.",28,{"inputs":[{"name":"ziplongestiterator"},{"name":"rightit"}],"output":{"name":"ziplongest"}}]],"paths":[[8,"AccumulateIterator"],[3,"Accumulate"],[8,"CartesianProductIterator"],[3,"CartesianProduct"],[8,"CloneEachIterator"],[3,"CloneEach"],[8,"GroupByIterator"],[3,"GroupBy"],[3,"Group"],[8,"FoldlIterator"],[8,"FoldrIterator"],[8,"IntersperseIterator"],[3,"Intersperse"],[8,"KeepSomeIterator"],[3,"KeepSome"],[8,"PadTailToIterator"],[3,"PadTailTo"],[8,"RoundRobinIterator"],[3,"RoundRobin"],[3,"RoundRobinLongest"],[8,"SkipExactlyIterator"],[8,"SortedIterator"],[8,"StrideIterator"],[3,"Stride"],[8,"TakeExactlyIterator"],[3,"TakeExactly"],[8,"TeeIterator"],[3,"Tee"],[8,"ZipLongestIterator"],[3,"ZipLongest"]]};
searchIndex['grabbag_macros'] = {"items":[[14,"count_exprs!","grabbag_macros","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"collect!","","This macro provides a way to initialise any container for which there is a FromIterator implementation.  It allows for both sequence and map syntax to be used, as well as inline type ascription for the result.",null,null],[14,"sequence!","","Expands to an expression implementing the `Iterator` trait, which yields successive\nelements of the given closed-form sequence.",null,null],[14,"recurrence!","","Expands to an expression implementing the `Iterator` trait, which yields successive\nelements of the given recurrence relationship.",null,null]],"paths":[]};
initSearch(searchIndex);
